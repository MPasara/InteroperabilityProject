//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Main.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MotoService1Soap", Namespace="")]
    public partial class MotoService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllMotorcyclesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMotorcycleByMakeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MotoService1() {
            this.Url = global::Main.Properties.Settings.Default.Main_localhost_MotoService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAllMotorcyclesCompletedEventHandler GetAllMotorcyclesCompleted;
        
        /// <remarks/>
        public event GetMotorcycleByMakeCompletedEventHandler GetMotorcycleByMakeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetAllMotorcycles", RequestNamespace="", ResponseNamespace="", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Motorcycle[] GetAllMotorcycles() {
            object[] results = this.Invoke("GetAllMotorcycles", new object[0]);
            return ((Motorcycle[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMotorcyclesAsync() {
            this.GetAllMotorcyclesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllMotorcyclesAsync(object userState) {
            if ((this.GetAllMotorcyclesOperationCompleted == null)) {
                this.GetAllMotorcyclesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMotorcyclesOperationCompleted);
            }
            this.InvokeAsync("GetAllMotorcycles", new object[0], this.GetAllMotorcyclesOperationCompleted, userState);
        }
        
        private void OnGetAllMotorcyclesOperationCompleted(object arg) {
            if ((this.GetAllMotorcyclesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMotorcyclesCompleted(this, new GetAllMotorcyclesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetMotorcycleByMake", RequestNamespace="", ResponseNamespace="", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Motorcycle GetMotorcycleByMake(string make) {
            object[] results = this.Invoke("GetMotorcycleByMake", new object[] {
                        make});
            return ((Motorcycle)(results[0]));
        }
        
        
        /// <remarks/>
        public void GetMotorcycleByMakeAsync(string make) {
            this.GetMotorcycleByMakeAsync(make, null);
        }
        
        /// <remarks/>
        public void GetMotorcycleByMakeAsync(string make, object userState) {
            if ((this.GetMotorcycleByMakeOperationCompleted == null)) {
                this.GetMotorcycleByMakeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMotorcycleByMakeOperationCompleted);
            }
            this.InvokeAsync("GetMotorcycleByMake", new object[] {
                        make}, this.GetMotorcycleByMakeOperationCompleted, userState);
        }
        
        private void OnGetMotorcycleByMakeOperationCompleted(object arg) {
            if ((this.GetMotorcycleByMakeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMotorcycleByMakeCompleted(this, new GetMotorcycleByMakeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Motorcycle {
        
        private string makeField;
        
        private string nameField;
        
        private string typeField;
        
        private int powerField;
        
        private double weightField;
        
        /// <remarks/>
        public string Make {
            get {
                return this.makeField;
            }
            set {
                this.makeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int Power {
            get {
                return this.powerField;
            }
            set {
                this.powerField = value;
            }
        }
        
        /// <remarks/>
        public double Weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAllMotorcyclesCompletedEventHandler(object sender, GetAllMotorcyclesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMotorcyclesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMotorcyclesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Motorcycle[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Motorcycle[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMotorcycleByMakeCompletedEventHandler(object sender, GetMotorcycleByMakeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMotorcycleByMakeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMotorcycleByMakeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Motorcycle Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Motorcycle)(this.results[0]));
            }
        }
        public override string ToString()
        {
            return base.ToString();
        }
    }
}

#pragma warning restore 1591